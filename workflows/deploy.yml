    name: Deploy to GitHub Pages

    on:
      push:
        branches:
          - main # O la rama principal que uses para tu código (master, develop, etc.)
      workflow_dispatch: # Permite ejecutar el workflow manualmente desde GitHub Actions

    jobs:
      build-and-deploy:
        runs-on: ubuntu-latest # Ejecuta en una máquina virtual de Ubuntu

        steps:
          # Paso 1: Checkout del código
          - name: Checkout repository
            uses: actions/checkout@v4
            with:
              # Si necesitas un token de acceso personal para submodules u otras acciones, configúralo aquí
              # O si tu repositorio es privado y necesitas que el runner de GHA tenga permisos
              token: ${{ secrets.GITHUB_TOKEN }} # Por defecto, GITHUB_TOKEN es suficiente para repositorios públicos

          # Paso 2: Configurar Node.js
          - name: Set up Node.js
            uses: actions/setup-node@v4
            with:
              node-version: '20' # Usa una versión LTS de Node.js

          # Paso 3: Instalar dependencias
          - name: Install dependencies
            run: npm install

          # Paso 4: Construir la aplicación (Vite)
          - name: Build application
            run: npm run build

          # Paso 5: Desplegar a GitHub Pages
          # Utiliza el "upload-pages-artifact" y "deploy-pages" de GitHub.
          # Esta es la forma oficial y más robusta de desplegar a GH Pages con GHA.
          - name: Upload artifact
            uses: actions/upload-pages-artifact@v3
            with:
              path: './dist' # Sube el contenido de la carpeta 'dist'

          - name: Deploy to GitHub Pages
            id: deployment
            uses: actions/deploy-pages@v4
            with:
              token: ${{ secrets.GITHUB_TOKEN }} # Asegura los permisos para desplegar
            env:
              VITE_APP_BASE: ${{ secrets.REPOSITORY_NAME }} # Opcional: si necesitas pasar el nombre del repo como variable de entorno a Vite
    